def github_views(connection, result):
    view1 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.GITHUB_STARS_DAILY_GROWTH AS
    SELECT
        TECHNOLOGY,
        UPDATE_DATE,
        STARS,
        LAG(STARS) OVER (PARTITION BY TECHNOLOGY ORDER BY UPDATE_DATE) AS PREV_STARS,
        STARS - LAG(STARS) OVER (PARTITION BY TECHNOLOGY ORDER BY UPDATE_DATE) AS STARS_DAILY_GROWTH
    FROM
        TECH_METRICS.GOLD.GITHUB_DAILY
    ORDER BY TECHNOLOGY, UPDATE_DATE;
    """

    view2 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.GITHUB_FORKS_DAILY_GROWTH AS
    SELECT
        TECHNOLOGY,
        UPDATE_DATE,
        FORKS,
        LAG(FORKS) OVER (PARTITION BY TECHNOLOGY ORDER BY UPDATE_DATE) AS PREV_FORKS,
        FORKS - LAG(FORKS) OVER (PARTITION BY TECHNOLOGY ORDER BY UPDATE_DATE) AS FORKS_DAILY_GROWTH
    FROM
        TECH_METRICS.GOLD.GITHUB_DAILY
    ORDER BY TECHNOLOGY, UPDATE_DATE;
    """

    view3 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.GITHUB_OPEN_ISSUES_TREND AS
    SELECT
        TECHNOLOGY,
        UPDATE_DATE,
        OPEN_ISSUES,
        OPEN_ISSUES - LAG(OPEN_ISSUES) OVER (PARTITION BY TECHNOLOGY ORDER BY UPDATE_DATE) AS DAILY_CHANGE
    FROM TECH_METRICS.GOLD.GITHUB_DAILY
    ORDER BY TECHNOLOGY, UPDATE_DATE;
    """

    view4 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.GITHUB_SUMMARY AS
    SELECT
        TECHNOLOGY,
        DATE_TRUNC('WEEK', UPDATE_DATE) AS WEEK_START,
        MAX(STARS) - MIN(STARS) AS STARS_WEEKLY_GROWTH,
        MAX(FORKS) - MIN(FORKS) AS FORKS_WEEKLY_GROWTH,
        MAX(OPEN_ISSUES) - MIN(OPEN_ISSUES) AS OPEN_ISSUES_WEEKLY_CHANGE
    FROM TECH_METRICS.GOLD.GITHUB_DAILY
    GROUP BY TECHNOLOGY, DATE_TRUNC('WEEK', UPDATE_DATE)
    ORDER BY TECHNOLOGY, WEEK_START;
    """
    cursor = connection.cursor()
    for v in [view1, view2, view3, view4]:
        cursor.execute(v)
    cursor.close()

def pypi_views(connection, result):
    view1 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.PYPI_DAILY_DOWNLOADS_GROWTH AS
    SELECT TECHNOLOGY, DAILY_START_DATE, DAILY_DOWNLOADS,
        DAILY_DOWNLOADS - LAG(DAILY_DOWNLOADS) OVER (PARTITION BY TECHNOLOGY ORDER BY DAILY_START_DATE) AS DOWNLOAD_DAILY_GROWTH
    FROM TECH_METRICS.GOLD.PYPI_DAILY
    ORDER BY TECHNOLOGY, DAILY_START_DATE;
    """
    view2 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.PYPI_WEEKLY_AVG_DOWNLOADS AS
    SELECT TECHNOLOGY, WEEKLY_START_DATE, WEEKLY_DOWNLOADS,
        WEEKLY_DOWNLOADS - LAG(WEEKLY_DOWNLOADS) OVER (PARTITION BY TECHNOLOGY ORDER BY WEEKLY_START_DATE) AS DOWNLOAD_WEEKLY_GROWTH
    FROM TECH_METRICS.GOLD.PYPI_DAILY
    ORDER BY TECHNOLOGY, WEEKLY_START_DATE;
    """
    view3 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.PYPI_MONTHLY_TREND AS
    SELECT TECHNOLOGY, MONTHLY_START_DATE, MONTHLY_DOWNLOADS,
        MONTHLY_DOWNLOADS - LAG(MONTHLY_DOWNLOADS) OVER (PARTITION BY TECHNOLOGY ORDER BY MONTHLY_START_DATE) AS DOWNLOAD_MONTHLY_GROWTH
    FROM TECH_METRICS.GOLD.PYPI_DAILY
    ORDER BY TECHNOLOGY, MONTHLY_START_DATE;
    """
    view4 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.PYPI_USAGE_SUMMARY AS
    SELECT
        TECHNOLOGY,
        MAX(COLLECTION_DATE) AS LAST_UPDATE,
        AVG(DAILY_DOWNLOADS) AS AVG_DAILY_DOWNLOADS,
        MAX(DAILY_DOWNLOADS) AS MAX_DAILY_DOWNLOADS,
        MIN(DAILY_DOWNLOADS) AS MIN_DAILY_DOWNLOADS,
        SUM(DAILY_DOWNLOADS) AS TOTAL_DOWNLOADS
    FROM TECH_METRICS.GOLD.PYPI_DAILY
    GROUP BY TECHNOLOGY
    ORDER BY TECHNOLOGY;
    """

    cursor = connection.cursor()
    for v in [view1, view2, view3, view4]:
        cursor.execute(v)
    cursor.close()

def technical_view(connection, pypi_result, git_result):
    view1 = f"""
    CREATE OR REPLACE VIEW TECH_METRICS.VIEW.TECH_POPULARITY_DAILY AS
    SELECT
        g.TECHNOLOGY,
        g.UPDATE_DATE,
        (g.STARS - LAG(g.STARS) OVER (PARTITION BY g.TECHNOLOGY ORDER BY g.UPDATE_DATE)) AS STARS_DAILY_GROWTH,
        (g.FORKS - LAG(g.FORKS) OVER (PARTITION BY g.TECHNOLOGY ORDER BY g.UPDATE_DATE)) AS FORKS_DAILY_GROWTH,
        p.DAILY_DOWNLOADS
    FROM TECH_METRICS.GOLD.GITHUB_DAILY g
    LEFT JOIN TECH_METRICS.GOLD.PYPI_DAILY p
        ON g.TECHNOLOGY = p.TECHNOLOGY
       AND g.UPDATE_DATE = p.DAILY_START_DATE
    ORDER BY g.TECHNOLOGY, g.UPDATE_DATE;
    """

    cursor = connection.cursor()
    cursor.execute(view1)
    cursor.close()
    
